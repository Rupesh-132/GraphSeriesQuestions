class Pair{
    int first;
    int second;
    int time;

    Pair(int first,int second,int time){
        this.first = first;
        this.second = second;
        this.time = time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
      

      int rows = grid.length;
      int cols = grid[0].length;

      Queue<Pair> q = new LinkedList<>();

      int visited[][] = new int[rows][cols];
       

      

      // pushing all the cells having the rotten oranges into the queue.

      for(int i=0;i<rows;i++){
          for(int j=0;j<cols;j++){

              if(grid[i][j] == 2){
                  q.add(new Pair(i,j,0));
                  visited[i][j] = 2;
              }
          }
      }

      int maxTime = 0;
      int deltaRow[] = {-1,0,1,0};
      int deltaCol[] = {0,1,0,-1};

      // making all the neighbours rotten consequently by visiting them.

      while(!q.isEmpty()){
          int currRow = q.peek().first;
          int currCol = q.peek().second;
          int time = q.peek().time;
          q.poll();
           maxTime = Math.max(time,maxTime);

           for(int i=0;i<4;i++){
               int nrow = currRow+deltaRow[i];
               int ncol = currCol+deltaCol[i];
               
               if(nrow>=0 && nrow<rows && ncol>=0 && ncol<cols && grid[nrow][ncol] == 1 && visited[nrow][ncol] !=2){
                   visited[nrow][ncol] = 2;
                   q.add(new Pair(nrow,ncol,time+1));
               }
           }
      }


      // doing a last check if any of the fresh oranges are remaining or not;

      for(int i=0;i<rows;i++){
          for(int j=0;j<cols;j++){
             if(visited[i][j] !=2 &&  grid[i][j] == 1){
                 return -1;
             }
          }
      }

      return maxTime;
       

    }
}