// Naive Approach=============using seive or eratosthenes=============
class Solution
{
    public int findNearestPrime(int n,int maxSize){
        
        
        // +7 because primes numbers are of the form 6n+1 or 6n-1
        
        boolean seiveArray[] = new boolean[maxSize+7];
        
        Arrays.fill(seiveArray,true);
        
        for(int i=2;i*i<=maxSize;i++){
            
            for(int j= i*i;j<seiveArray.length;j =j+i){
                if(seiveArray[j] == true){
                    seiveArray[j] = false;
                }
            }
        }
        
        
        //System.out.println(Arrays.toString(seiveArray));
        
        // if n is prime then directly return other wise go in the left and right side
        // find the primes at the minimum distance and update accordingly
        
        if(seiveArray[n] == true){
            return n;
        }else{
            
            int i=n-1; // left of n
            int j = n+1; // right of n
            
            
            // moving to the left of n
            
            while(i>0 && seiveArray[i] != true){
                
                i--;
                
            }
            
            
            // moving to the right of n
            while(seiveArray[j] !=true && j<seiveArray.length-1){
                j++;
            }
            
           // System.out.println(i+" "+j);
           
           
           // finding the primes at the minimum distance
            
            int min1 = n - i;
            int min2 = j-n;
            
            if(min1<min2){
                return i;
            }else if(min2<min1){
                return j;
            }else if(min1 == min2){
                return i;
            }
        }
        
    
        
        return 0;
        
    }
    Node primeList(Node head){
        //code here
        
        Node curr = head;
        int max = curr.val;
        // first finding the maximum element for building the seiveArray using
        // seive of Eratosthenes algorithm
        while(curr!=null){
            
            max = Math.max(curr.val,max);
            curr = curr.next;
            
        }
        
        
        curr = head;
        
        while(curr!=null){
            
            //nearest prime for 1 and 0 is 2
            if(curr.val == 1 || curr.val == 0){
                curr.val = 2;
            }else{
             int ans = findNearestPrime(curr.val,max);
             curr.val = ans;
             curr = curr.next;
            }
        }
       
        
        
        
        
        return head;
        
        
        
    }
}



// ==============================OPTIMAL APPROACH ===========================================