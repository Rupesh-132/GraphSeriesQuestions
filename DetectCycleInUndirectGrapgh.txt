class Pair{
    int first;  // for the curr node
    int second;  // for the parent node
    Pair(int first,int second){
        this.first = first;
        this.second = second;
    }
}
class Solution {
    // Function to detect cycle in an undirected graph.
    
    public boolean detectCycle(int src,ArrayList<ArrayList<Integer>> adj,boolean[] visited){
        
        visited[src] = true;
        Queue<Pair> q = new LinkedList<>();
        
        q.add(new Pair(src,-1));  //-1 for the first node;
        
        while(!q.isEmpty()){
            int currNode = q.peek().first;
            int parent = q.peek().second;
            q.poll();
            
            for(int v:adj.get(currNode)){
                
                if(visited[v] == false){
                    visited[v] = true;
                    q.add(new Pair(v,currNode));
                }else if(visited[v] == true && v != parent){
                    return true;
                }
            }
            
        }
        
        return false;
        
        
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        
        // detecting cycle using bfs
        // take the parent of first node as -1;
        // subsequently keep on updating the parent of all the visited nodes;
        boolean visited[] = new boolean[V];
        
        for(int i=0;i<V;i++){
            if(visited[i] == false){
                
               if(detectCycle(i,adj,visited) == true){
                   return true;
               }
               
              
            }
        }
        
        return false;
        
    }
}