class Solution
{
    
    public boolean doBfs(int start,int V,ArrayList<ArrayList<Integer>> adj,int color[]){
        
        Queue<Integer> q = new LinkedList<>();
        
        q.add(start);
        color[start] = 0;
        
        while(!q.isEmpty()){
            
            int node = q.peek();
            q.remove();
            
            for(int it:adj.get(node)){
                
                if(color[it] == -1){
                    color[it] = 1-color[node];
                    q.add(it);
                }else{
                    
                    if(color[it] == color[node]){
                        return false;
                    }
                    
                }
            }
        }
        return true;
    }
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here
        int color[] = new int[V]; // since the vetex is starting with 0
        
        Arrays.fill(color,-1);
        boolean ans = false;
        
        for(int i=0;i<V;i++){
            
            if(color[i] == -1){
               if(doBfs(i,V,adj,color) == false){
                   return false;
               };
            }
        }
        
        
        return true;
        
    }
}