class Solution {
    
    public void dfs(int row,int col, int visited[][],int grid[][],ArrayList<String> arr,int deltaRow[],int deltaCol[],int row0,int col0){
        
        visited[row][col] =1; 
        arr.add(toString(row-row0,col-col0));
        
        int n = grid.length;
        int m = grid[0].length;
        
        for(int i=0;i<4;i++){
            int nrow = row+deltaRow[i];
            int ncol = col+deltaCol[i];
            
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && visited[nrow][ncol] == 0 && grid[nrow][ncol] == 1){
                dfs(nrow,ncol,visited,grid,arr,deltaRow,deltaCol,row0,col0);
            }
        }
        
    }
    
    public String toString(int a,int b){
        return Integer.toString(a)+" "+Integer.toString(b);
    }

    int countDistinctIslands(int[][] grid) {
        // Your Code here
        
        int n = grid.length;
        int m = grid[0].length;
        
        int visited[][] = new int[n][m];
        
        int deltaRow[] = {-1,0,1,0};
        int deltaCol[] = {0,1,0,-1};
        
        HashSet<ArrayList<String>> hs = new HashSet<>();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                ArrayList<String> arr = new ArrayList<>();
                if(visited[i][j] == 0 && grid[i][j]==1){
                    dfs(i,j,visited,grid,arr,deltaRow,deltaCol,i,j);
                    hs.add(arr);
                }
            }
        }
        
       // System.out.println(hs);
        
        return hs.size();
        
    }
}
